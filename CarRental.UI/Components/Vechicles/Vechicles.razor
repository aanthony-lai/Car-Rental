@inject IJSRuntime _jsRuntime;
@inject IMediator _mediator;

<h3>Vechicles</h3>
<div class="vechicle-container">
	<table>
		<tr>
			<th>RegNo</th>
			<th>Brand</th>
			<th>Odometer</th>
			<th>Cost/Km</th>
			<th>Vechicle Type</th>
			<th>Daily cost</th>
			<td>Action</td>
			<th>Status</th>
		</tr>
		<tr>
			<td><input @bind="@addVechicleModel.RegNumber" type="text" placeholder="RegNo" /></td>
			<td><input @bind="@addVechicleModel.Brand" type="text" placeholder="Brand" /></td>
			<td><input @bind="@addVechicleModel.Odometer" type="number"/></td>
			<td><input @bind="@addVechicleModel.CostPerKm" type="number"/></td>
			<td>
				<select onchange="@((ChangeEventArgs e) => VechicleTypeChangeHandler(e))">
					<option></option>	
					<option>@VechicleType.Sedan.ToString()</option>
					<option>@VechicleType.Combi.ToString()</option>
					<option>@VechicleType.Van.ToString()</option>
					<option>@VechicleType.Motorcycle.ToString()</option>
				</select></td>
			<td></td>
			<td><button 
				disabled="@(rentInProgress ? true : false)" 
				onclick="@(() => AddVechicleHandler)" 
				class="btn btn-outline-success">
					Add</button></td>
			@* <td></td> *@
		</tr>
		@foreach (var vechicle in vechicles)
		{
			<VechicleList RentInProgress="rentInProgress" Vechicle="vechicle" />
		}
	</table>
</div>


@code {
	private List<IVechicle> vechicles = new();
	private AddVechicleModel addVechicleModel = new();
	private bool rentInProgress = false;

	private void VechicleTypeChangeHandler(ChangeEventArgs e) 
	{

	}

	private async Task AddVechicleHandler() 
	{
		try 
		{
			await _mediator.Send(new AddVechicleRequest(addVechicleModel));
			addVechicleModel = new();
		}
		catch (Exception ex) 
		{
			await _jsRuntime.InvokeVoidAsync("alert", $"{ex.Message}");
			addVechicleModel = new();
		}
	}

	// [Inject] public BookingProcessor? bookingProcessor { get; set; } = new BookingProcessor();
	// [Inject] public Helpers? helpService { get; set; }
	// [Parameter] public EventCallback stateChanged { get; set; }

	// ICustomer? customer { get; set; }
	// VechicleType type { get; set; }
	// double costPerKm { get; set; }
	// int customerSSN { get; set; }
	// int odometer { get; set; }
	// int pricePerDay { get; set; }
	// int distance { get; set; }
	// string? regNO { get; set; }
	// string? brand { get; set; }

	// bool isRenting { get; set; } = false;

	// void stateChangedHandler()
	// {
	// 	StateHasChanged();
	// }

	// async Task createCarHandler(string regNumber, string brand, int odometer, double costPerKm, VechicleType type)
	// {
	// 	bool isExistingVechicle = bookingProcessor.GetData<IVechicle>().Any(vechicle => vechicle.regNumber == regNumber.ToUpper());
	// 	if (regNumber.Length != 6)
	// 	{
	// 		await js.InvokeVoidAsync("alert", "RegNumbers must contain 6 characters!");
	// 		return;
	// 	}
	// 	else if(isExistingVechicle)
	// 	{
	// 		await js.InvokeVoidAsync("alert", "RegNo already exists!");
	// 		return;
	// 	}
	// 	await bookingProcessor.CreateVechicle(helpService.CheckVechicleType(regNumber, brand, odometer, costPerKm, type, pricePerDay));
	// 	regNO = string.Empty;
	// 	brand = string.Empty;
	// 	odometer = 0;
	// 	costPerKm = 0;
	// 	pricePerDay = 0;
	// }

	// void vechicleTypeChange(ChangeEventArgs e)
	// {
	// 	switch(e.Value)
	// 	{
	// 		case "Sedan":
	// 			type = VechicleType.Sedan;
	// 			pricePerDay = 100;
	// 			break;
	// 		case "Combi":
	// 			type = VechicleType.Combi;
	// 			pricePerDay = 200;
	// 			break;
	// 		case "Van":
	// 			type = VechicleType.Van;
	// 			pricePerDay = 300;
	// 			break;
	// 		case "Motorcycle":
	// 			type = VechicleType.Motorcycle;
	// 			pricePerDay = 50;
	// 			break;
	// 	}
	// }

	// async Task returnCarHandler(IVechicle vechicle, int distance)
	// {

	// 	await bookingProcessor.ReturnCar(vechicle, distance);
	// 	await stateChanged.InvokeAsync();
	// 	distance = 0;
	// }

	// void customerChangeHandler(ChangeEventArgs e)
	// {
	// 	customerSSN = Convert.ToInt32(e.Value);
	// 	customer = bookingProcessor.GetData<ICustomer>().FirstOrDefault(customer => customer.ssn == customerSSN);
	// }

	// async Task rentCarHandler(IVechicle vechicle, ICustomer customer)
	// {
	// 	if (customer is null)
	// 	{
	// 		await js.InvokeVoidAsync("alert", "Please select a customer.");
	// 		return;
	// 	}
	// 	if (customer.isRenting)
	// 	{
	// 		await js.InvokeVoidAsync("alert", "This customer has an open booking, please return the car first!");
	// 		customer = null;
	// 		return;
	// 	}
	// 	isRenting = true;
	// 	await bookingProcessor.CreateBookings(vechicle, customer);
	// 	isRenting = false;
	// 	await stateChanged.InvokeAsync();
	// 	customer = null;
		
	// }
}
