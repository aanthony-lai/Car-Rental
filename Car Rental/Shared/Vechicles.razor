@inject IJSRuntime js;

<h3>Vechicles</h3>
<div class="vechicle-container">
	<table>
		<tr>
			<th>RegNo</th>
			<th>Brand</th>
			<th>Odometer</th>
			<th>Cost/Km</th>
			<th>Vechicle Type</th>
			<th>$ Day</th>
			<td>Action</td>
			<th>Status</th>
		</tr>
		<tr>
			<td><input @bind="@regNO" type="text" placeholder="RegNo" /></td>
			<td><input @bind="@brand" type="text" placeholder="Brand" /></td>
			<td><input @bind="@odometer" type="number"/></td>
			<td><input @bind="@costPerKm" type="number"/></td>
			<td><select onchange="@((ChangeEventArgs e) => vechicleTypeChange(e))">
				<option></option>	
				<option>Sedan</option>
				<option>Combi</option>
				<option>Van</option>
				<option>Motorcycle</option>
			</select></td>
			<td></td>
			<td><button disabled="@(isRenting ? true : false)" onclick="@(() => createCarHandler(regNO, brand, odometer, costPerKm, type))" class="btn btn-outline-success">Add</button></td>
			<td></td>
		</tr>
		@foreach (var car in bookingProcessor.GetData<IVechicle>())
		{
			<tr>
				<td><strong>@car.regNumber</strong></td>
				<td>@car.brand</td>
				<td>@car.odometer</td>
				<td>@car.costPerKm</td>
				<td>@car.vechicleType</td>
				<td>@car.costPerDay</td>
				<td>
					@if (car.status == VechicleStatuses.Available)
					{
						<select @onchange="customerChangeHandler">
							<option></option>
							@foreach (var customer in bookingProcessor.GetData<ICustomer>())
							{
								<option>@customer.ssn</option>
							}
						</select>
						<button disabled="@(isRenting ? true : false)" @onclick="@(() => rentCarHandler(car, customer))" class="btn btn-outline-primary">Rent</button>
					}
					else
					{
						<input @bind="distance" type="number" placeholder="Distance"/>
						<button disabled="@(isRenting ? true : false)" @onclick="@(() => returnCarHandler(car, distance))" class="btn btn-outline-success">Return</button>
					}
				</td>
				<td>
					<button disabled="true" class="@(car.status == VechicleStatuses.Available ? "btn btn-dark" : "btn btn-danger")">@car.status</button>
				</td>
			</tr>
		}
	</table>
</div>


@code {
	[Inject] public BookingProcessor? bookingProcessor { get; set; } = new BookingProcessor();
	[Inject] public Helpers? helpService { get; set; }
	[Parameter] public EventCallback stateChanged { get; set; }

	ICustomer? customer { get; set; }
	VechicleTypes type { get; set; }
	double costPerKm { get; set; }
	int customerSSN { get; set; }
	int odometer { get; set; }
	int pricePerDay { get; set; }
	int distance { get; set; }
	string? regNO { get; set; }
	string? brand { get; set; }

	bool isRenting { get; set; } = false;

	void stateChangedHandler()
	{
		StateHasChanged();
	}

	async Task createCarHandler(string regNumber, string brand, int odometer, double costPerKm, VechicleTypes type)
	{
		bool isExistingVechicle = bookingProcessor.GetData<IVechicle>().Any(vechicle => vechicle.regNumber == regNumber.ToUpper());
		if (regNumber.Length != 6)
		{
			await js.InvokeVoidAsync("alert", "RegNumbers must contain 6 characters!");
			return;
		}
		else if(isExistingVechicle)
		{
			await js.InvokeVoidAsync("alert", "RegNo already exists!");
			return;
		}
		await bookingProcessor.CreateVechicle(helpService.CheckVechicleType(regNumber, brand, odometer, costPerKm, type, pricePerDay));
		regNO = string.Empty;
		brand = string.Empty;
		odometer = 0;
		costPerKm = 0;
		pricePerDay = 0;
	}

	void vechicleTypeChange(ChangeEventArgs e)
	{
		switch(e.Value)
		{
			case "Sedan":
				type = VechicleTypes.Sedan;
				pricePerDay = 100;
				break;
			case "Combi":
				type = VechicleTypes.Combi;
				pricePerDay = 200;
				break;
			case "Van":
				type = VechicleTypes.Van;
				pricePerDay = 300;
				break;
			case "Motorcycle":
				type = VechicleTypes.Motorcycle;
				pricePerDay = 50;
				break;
		}
	}

	async Task returnCarHandler(IVechicle vechicle, int distance)
	{

		await bookingProcessor.ReturnCar(vechicle, distance);
		await stateChanged.InvokeAsync();
		distance = 0;
	}

	void customerChangeHandler(ChangeEventArgs e)
	{
		customerSSN = Convert.ToInt32(e.Value);
		customer = bookingProcessor.GetData<ICustomer>().FirstOrDefault(customer => customer.ssn == customerSSN);
	}

	async Task rentCarHandler(IVechicle vechicle, ICustomer customer)
	{
		if (customer is null)
		{
			await js.InvokeVoidAsync("alert", "Please select a customer.");
			return;
		}
		if (customer.isRenting)
		{
			await js.InvokeVoidAsync("alert", "This customer has an open booking, please return the car first!");
			customer = null;
			return;
		}
		isRenting = true;
		await bookingProcessor.CreateBookings(vechicle, customer);
		isRenting = false;
		await stateChanged.InvokeAsync();
		customer = null;
		
	}
}
